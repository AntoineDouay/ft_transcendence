// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ONLINE
  OFFLINE
  PLAYING
  WAITING
  WATCHING
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DECLINED
  PROGRESSING
  FINISHED
}

enum Role {
  USER
  ADMIN
  OWNER
}

enum ChannelStatus {
  PRIVATE
  PUBLIC
  PROTECTED
  MP
}

enum MatchResult {
  WINNER
  DRAW
  LOOSER
}

model User {
  id          Int @id @default(autoincrement())
  createdAt   DateTime @default(now())

  username    String  @unique
  email       String  @unique
  hash        String
  avatar      String
  phoneNumber String
  twoFA       Boolean
  wins        Int
	draws       Int
	losses      Int
  status      UserStatus
  requests    Invitation[]

  games       UsersOnGames[]

  hasFriends  Friends[] @relation("hasFriends")
  isFriend    Friends[] @relation("isFriend")

  channels  UsersOnChannels[]
  messages  Message[]

  @@map("users")
}

// self relation m-m user-user
model Friends {
  hasFriends   User @relation("hasFriends", fields: [hasFriendsId], references: [id])
  hasFriendsId Int
  isFriend    User @relation("isFriend", fields: [isFriendId], references: [id])
  isFriendId  Int
  request     RequestStatus

  @@id([hasFriendsId, isFriendId])
}

model Channel {
  id          Int  @id @default(autoincrement())
  createdAt   DateTime @default(now())
  name        String
  type        ChannelStatus
  password    String?
  invitation  Invitation[]

  members     UsersOnChannels[]
  content     Message[]
}

model Game {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  players     UsersOnGames[]
  invitation  Invitation[] 
  level       Int
}

// relation 1-m user-invitation channel-invitation game-invitation
model Invitation {
  id        Int  @id @default(autoincrement())
  createdAt DateTime @default(now())
  sender    User @relation(fields: [senderId], references: [id])
  senderId  Int
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId Int
  game      Game @relation(fields: [gameId], references: [id])
  gameId    Int
  status    RequestStatus
}

// Relation 1-m user-message et channel-message 
model Message {
  id        Int  @id @default(autoincrement())
  author    User @relation(fields: [authorId], references: [id])
  authorId  Int
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId Int
  content   String?
  isInvit   Boolean @default(false)
}

// Relation m-m user-channel
model UsersOnChannels {
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId Int
  role      Role

  @@id([userId, channelId])
}

// Relation m-m user-game
model UsersOnGames {
  user      User  @relation(fields: [userId], references: [id])
  userId    Int
  game      Game  @relation(fields: [gameId], references: [id])
  gameId    Int
  podium    MatchResult

  @@id([userId, gameId])
}








