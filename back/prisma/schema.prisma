// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider			= "postgresql"
  url				= env("DATABASE_URL")
}

enum UserStatus {
  ONLINE
  OFFLINE
  PLAYING
  WAITING
  WATCHING
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DECLINED
  PROGRESSING
  FINISHED
}

enum GameStatus {
  PENDING
  PLAYING
  FINISHED
}

enum Role {
  MEMBER
  ADMIN
  OWNER
  BANNED
  UNBANNED
}

enum ChannelStatus {
  PRIVATE
  PUBLIC
  PROTECTED
  MP
}

enum messageStatus {
	TEXT
	INVITATION
}

enum LogStatus {
	JOIN
	INVITE
	LEAVE
	UPGRADE
	DOWNGRADE
	MUTE
	KICK
	BAN
	UNBAN
}

enum challengeStatus {
	PENDING
	CANCELLED
	IN_PROGRESS
	FINISHED
}

enum MatchResult {
  WINNER
  DRAW
  LOOSER
}

enum roleInGame {
  PLAYER
  WATCHER
}

model User {
  id          Int @id @default(autoincrement())
  createdAt   DateTime @default(now())

  usernameId  String?	@unique
  username    String  @unique
  hash        String
  avatar		String
  twoFA       Boolean
  twoFASecret String
	wins        Int
	draws       Int
	losses      Int
  status      UserStatus @default(OFFLINE)
  requests    Invitation[]

  games       UsersOnGames[]

  friends     Friend[] @relation("friends")
  blockeds    Blocked[] @relation("blockeds")

  channels    UsersOnChannels[]
  messages    Message[]

  @@map("users")
}

model Friend {
  friend    User @relation("friends", fields: [userId], references: [id])
  userId  Int
  friendId Int

  @@id([userId, friendId])
}

model Blocked {
  blocked    User @relation("blockeds", fields: [userId], references: [id])
  userId  Int
  blockedId Int

  @@id([userId, blockedId])
}

model Channel {
  id          Int  @id @default(autoincrement())
  createdAt   DateTime @default(now())
  name        String
  avatar		String
  type        ChannelStatus
  hash        String?
  invitation  Invitation[]

  users       UsersOnChannels[]
  content     Message[]
}

model Game {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  players     UsersOnGames[]
  invitation  Invitation[] 
  level       Int
  status      GameStatus
}

// relation 1-m user-invitation channel-invitation game-invitation
model Invitation {
  id        Int  @id @default(autoincrement())
  createdAt DateTime @default(now())
  sender    User @relation(fields: [senderId], references: [id])
  senderId  Int
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId Int
  game      Game @relation(fields: [gameId], references: [id])
  gameId    Int
  status    RequestStatus
}

// Relation 1-m user-message et channel-message 
model Message {
  id        Int  @id @default(autoincrement()) 
  author    User @relation(fields: [authorId], references: [id])
  authorId  Int
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId Int
  type      messageStatus // add

  content   String? 

  targetId  Int? // add
  status    challengeStatus? // add
  
  isInvit   Boolean @default(false)
}

// Relation m-m user-channel
model UsersOnChannels {
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId Int
  role      Role
  mute      DateTime @default(now())

  @@id([userId, channelId])
}

// Relation m-m user-game
model UsersOnGames {
  user      User  @relation(fields: [userId], references: [id])
  userId    Int
  game      Game  @relation(fields: [gameId], references: [id])
  gameId    Int
  score     Int @default(0)
  result    MatchResult   
  role      roleInGame

  @@id([userId, gameId])
}